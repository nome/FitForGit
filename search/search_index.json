{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! START SLIDES","title":"Home"},{"location":"#welcome","text":"START SLIDES","title":"Welcome!"},{"location":"01_recording_changes/","text":"Recording Changes First-time setup git config --global user.name \"Your Name\" git config --global user.email user@domain.tld Git is a distributed system, so it uses email addresses to uniquely identify users. try `git help config` Creating a repository git init repo cd repo This creates a new, empty repository which lives only on your computer (for now). echo git cool_stuff.txt git status run `git init` without argument to start tracking existing files in `./` Staging changes git add cool_stuff.txt git status you can also add entire directories with `git add` make changes in different parts of a file and try `git add -p` The staging area can track only one version of each file, so we're not done yet. Committing (to) a version git commit git status you can skip `git add` for files known to Git using `git commit -a` Viewing history gitk GUI separate tool tig ncurses separate tool git log text included in git Every commit contains a snapshot of the entire repository; unlike checkins in RCS or Subversion, which operate on individual files or directories, respectively. The why of commit messages the who/when/what of a change is recorded automatically commit messages primarily explain the \"why\" they summarize changes for history overviews (e.g. in gitk ) they may contain pointers to ticket IDs for future reference The how of commit messages First line: very short summary, what changed? After a blank line follows the answer to the why . What was the motivation for the change? How is the need addressed by this commit? If applicable: Which alternatives were considered, and why were they discarded? Closes #bugid. Training Time git config --global user.name \"Your Name\" git config --global user.email user@domain.tld create a new, empty repository commit some changes view the resulting history Try `git revert HEAD~1`. What does it do? Can you revert other changes? Look at the contents of the `.git` directory - what changes at each step?","title":"Recording Changes"},{"location":"01_recording_changes/#recording-changes","text":"","title":"Recording Changes"},{"location":"01_recording_changes/#first-time-setup","text":"git config --global user.name \"Your Name\" git config --global user.email user@domain.tld Git is a distributed system, so it uses email addresses to uniquely identify users. try `git help config`","title":"First-time setup"},{"location":"01_recording_changes/#creating-a-repository","text":"git init repo cd repo This creates a new, empty repository which lives only on your computer (for now). echo git cool_stuff.txt git status run `git init` without argument to start tracking existing files in `./`","title":"Creating a repository"},{"location":"01_recording_changes/#staging-changes","text":"git add cool_stuff.txt git status you can also add entire directories with `git add` make changes in different parts of a file and try `git add -p` The staging area can track only one version of each file, so we're not done yet.","title":"Staging changes"},{"location":"01_recording_changes/#committing-to-a-version","text":"git commit git status you can skip `git add` for files known to Git using `git commit -a`","title":"Committing (to) a version"},{"location":"01_recording_changes/#viewing-history","text":"gitk GUI separate tool tig ncurses separate tool git log text included in git Every commit contains a snapshot of the entire repository; unlike checkins in RCS or Subversion, which operate on individual files or directories, respectively.","title":"Viewing history"},{"location":"01_recording_changes/#the-why-of-commit-messages","text":"the who/when/what of a change is recorded automatically commit messages primarily explain the \"why\" they summarize changes for history overviews (e.g. in gitk ) they may contain pointers to ticket IDs for future reference","title":"The why of commit messages"},{"location":"01_recording_changes/#the-how-of-commit-messages","text":"First line: very short summary, what changed? After a blank line follows the answer to the why . What was the motivation for the change? How is the need addressed by this commit? If applicable: Which alternatives were considered, and why were they discarded? Closes #bugid.","title":"The how of commit messages"},{"location":"01_recording_changes/#training-time","text":"git config --global user.name \"Your Name\" git config --global user.email user@domain.tld create a new, empty repository commit some changes view the resulting history Try `git revert HEAD~1`. What does it do? Can you revert other changes? Look at the contents of the `.git` directory - what changes at each step?","title":"Training Time"},{"location":"02_central_repository/","text":"Central Repository Clones git clone git@ffg:ffg/hello.git cd hello ls git status This has created a clone of the hello.git repository. The repository we cloned from is called its origin . By convention, central (\"bare\") repositories have the suffix .git , while repositories we can make commits in do not. Pulling updates git pull . . . * 8c577b0 Merge branch 'master' of \u21b5 http://ffg/gogs/ffg/hello.git |\\ | * b983d4c Linux is also cool * | e8fa16e Start collecting numbers |/ * 3adcc80 My second git commit * b323f69 My first git commit try `git log --graph --oneline` Interpreting conflicts git pull In cool_stuff.txt : T\u00fcbix Git HEAD reveal.js ======= Linux b983d4cc25261780d3b2a21a142d4750394c5c77 Resolving conflicts git mergetool git commit \"Uploading\" changes git push # ... # To git@ffg:ffg/hello.git # d039e72..325b819 master - master git push # ... # To git@ffg:ffg/hello.git # ! [rejected] master - master (non-fast-forward) # error: failed to push some refs to 'git@ffg:ffg/hello.git' # ... Training Time get a clone of add a new file to your clone upload your change and get the changes of other participants repeat with the file cool_stuff.txt (this should give conflits which you need to resolve)","title":"Central Repository"},{"location":"02_central_repository/#central-repository","text":"","title":"Central Repository"},{"location":"02_central_repository/#clones","text":"git clone git@ffg:ffg/hello.git cd hello ls git status This has created a clone of the hello.git repository. The repository we cloned from is called its origin . By convention, central (\"bare\") repositories have the suffix .git , while repositories we can make commits in do not.","title":"Clones"},{"location":"02_central_repository/#pulling-updates","text":"git pull . . . * 8c577b0 Merge branch 'master' of \u21b5 http://ffg/gogs/ffg/hello.git |\\ | * b983d4c Linux is also cool * | e8fa16e Start collecting numbers |/ * 3adcc80 My second git commit * b323f69 My first git commit try `git log --graph --oneline`","title":"Pulling updates"},{"location":"02_central_repository/#interpreting-conflicts","text":"git pull In cool_stuff.txt : T\u00fcbix Git HEAD reveal.js ======= Linux b983d4cc25261780d3b2a21a142d4750394c5c77","title":"Interpreting conflicts"},{"location":"02_central_repository/#resolving-conflicts","text":"git mergetool git commit","title":"Resolving conflicts"},{"location":"02_central_repository/#uploading-changes","text":"git push # ... # To git@ffg:ffg/hello.git # d039e72..325b819 master - master git push # ... # To git@ffg:ffg/hello.git # ! [rejected] master - master (non-fast-forward) # error: failed to push some refs to 'git@ffg:ffg/hello.git' # ...","title":"\"Uploading\" changes"},{"location":"02_central_repository/#training-time","text":"get a clone of add a new file to your clone upload your change and get the changes of other participants repeat with the file cool_stuff.txt (this should give conflits which you need to resolve)","title":"Training Time"},{"location":"03_branching_and_merging/","text":"Branching and Merging Visualizing history ::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git log --graph --oneline * 5567e85 (HEAD - master) My third git commit * df5a1e0 My second git commit * d3a1a32 My first git commit ::: ::::::::: Branching off ::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git branch feature master~2 git checkout feature $EDITOR; git commit -a * 16ae900 (feature) Commit on feature branch | * 5567e85 (master) My third git commit | * df5a1e0 My second git commit |/ * d3a1a32 My first git commit ::: ::::::::: Merging ::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git checkout master git merge feature ::: ::::::::: Merge conflicts Git merges histories of the entire repository; until all conflicts are resolved and committed, the merge is \"in progress\" for all files. You can abort a merge in progress with `git merge --abort` Rebasing ::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git checkout feature git rebase master ::: ::::::::: Cherry-picking ::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git checkout master git cherry-pick feature ::: ::::::::: Merge/Rebase/Cherry-pick ::::::::: {.columns} ::: {.column width=\"25%\"} ::: ::: {.column width=\"25%\"} ::: ::: {.column width=\"25%\"} ::: ::: {.column width=\"25%\"} ::: :::::::::","title":"Branching and Merging"},{"location":"03_branching_and_merging/#branching-and-merging","text":"","title":"Branching and Merging"},{"location":"03_branching_and_merging/#visualizing-history","text":"::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git log --graph --oneline * 5567e85 (HEAD - master) My third git commit * df5a1e0 My second git commit * d3a1a32 My first git commit ::: :::::::::","title":"Visualizing history"},{"location":"03_branching_and_merging/#branching-off","text":"::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git branch feature master~2 git checkout feature $EDITOR; git commit -a * 16ae900 (feature) Commit on feature branch | * 5567e85 (master) My third git commit | * df5a1e0 My second git commit |/ * d3a1a32 My first git commit ::: :::::::::","title":"Branching off"},{"location":"03_branching_and_merging/#merging","text":"::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git checkout master git merge feature ::: :::::::::","title":"Merging"},{"location":"03_branching_and_merging/#merge-conflicts","text":"Git merges histories of the entire repository; until all conflicts are resolved and committed, the merge is \"in progress\" for all files. You can abort a merge in progress with `git merge --abort`","title":"Merge conflicts"},{"location":"03_branching_and_merging/#rebasing","text":"::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git checkout feature git rebase master ::: :::::::::","title":"Rebasing"},{"location":"03_branching_and_merging/#cherry-picking","text":"::::::::: {.columns} ::: {.column width=\"30%\"} ::: ::: {.column width=\"70%\" .textcolumn} git checkout master git cherry-pick feature ::: :::::::::","title":"Cherry-picking"},{"location":"03_branching_and_merging/#mergerebasecherry-pick","text":"::::::::: {.columns} ::: {.column width=\"25%\"} ::: ::: {.column width=\"25%\"} ::: ::: {.column width=\"25%\"} ::: ::: {.column width=\"25%\"} ::: :::::::::","title":"Merge/Rebase/Cherry-pick"},{"location":"04_pull_requests/","text":"Pull Requests Training Time open http://ffg/gogs/ffg/hello in a browser and fork the repository clone your fork and make some changes to it create a pull request from your changes","title":"Pull Requests"},{"location":"04_pull_requests/#pull-requests","text":"","title":"Pull Requests"},{"location":"04_pull_requests/#training-time","text":"open http://ffg/gogs/ffg/hello in a browser and fork the repository clone your fork and make some changes to it create a pull request from your changes","title":"Training Time"},{"location":"05_rewriting_history/","text":"Rewriting History","title":"Rewriting History"},{"location":"05_rewriting_history/#rewriting-history","text":"","title":"Rewriting History"},{"location":"repos/","text":".wy-nav-content { max-width: 100%; } Your browser does not support iframes, so the repository page can't be shown here. Please click here to see it.","title":"Repos"},{"location":"slidestart/","text":"open http://ffg/ for handout","title":"Fit for Git"}]}