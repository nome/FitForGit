---
- name: Set up Gogs server
  hosts: server

  roles:
    - role: nome.gogs
      gogs_app_name: FitForGit
      gogs_admin: "{{ admin_user }}"
      gogs_admin_password: "{{ admin_pw }}"
      gogs_bind_addr: 127.0.0.1
      gogs_url: http://{{ ansible_fqdn }}

    - role: jdauphant.nginx
      nginx_sites:
        gogs:
          - listen 80
          - location / { proxy_pass http://127.0.0.1:{{ gogs_http_port }}; }

  post_tasks:
  - name: check whether reverse proxy is running
    local_action: wait_for port=80


- name: Set up clients
  hosts: client
  vars:
    workshop_user: "{{ inventory_hostname | regex_replace('[^A-Za-z0-9]', '') | truncate(8, true, '') }}"
  tasks:
  - name: install Git
    package: name=git state=present
  - name: create user account for workshop participant
    user:
      name: "{{ workshop_user }}"
      password: "{{ user_pw|password_hash('sha512') }}"
      generate_ssh_key: yes
      ssh_key_type: "{{ ssh_key_type }}"
  - name: fetch SSH key of user account
    fetch:
      src: /home/{{ workshop_user }}/.ssh/id_{{ ssh_key_type }}.pub
      dest: id_{{ ssh_key_type }}_{{ workshop_user }}.pub
      flat: yes

- name: Set up default Gogs accounts
  hosts: server

  vars:
    gogs_api: http://{{ ansible_fqdn }}/api/v1
    workshop_users: "{{ users | default(groups['client'] | map('regex_replace', '[^A-Za-z0-9]', '') | map('truncate', 8, true, '') | list)}}"

  tasks:
  - name: check SSH keys in Gogs admin_user account
    local_action:
      module: uri
      url: "{{ gogs_api }}/users/{{ admin_user }}/keys"
      method: GET
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
    register: admin_user_keys

  - name: add your public key to admin_user account
    vars:
      admin_pubkey: "{{ lookup('file', '~/.ssh/id_{{ ssh_key_type }}.pub') }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/admin/users/{{ admin_user }}/keys"
      method: POST
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
      body_format: json
      body:
        title: default
        key: "{{ admin_pubkey }}"
      status_code: 201
    when: not admin_pubkey in admin_user_keys.json|map(attribute='key')
    changed_when: not admin_pubkey in admin_user_keys.json|map(attribute='key')
    ignore_errors: yes

  - name: check for existing Gogs users
    with_items: "{{ workshop_users }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/users/{{ item }}"
      method: GET
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
      status_code: 200,404
    register: existing_gogs_users

  - name: create missing Gogs users for workshop participants
    with_items: "{{ workshop_users }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/admin/users"
      method: POST
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
      body_format: json
      body:
        username: "{{ item }}"
        email: "{{ item }}@localhost.localdomain"
        password: "{{ user_pw }}"
      status_code: 201
    when: item not in existing_gogs_users.results | selectattr('status', 'equalto', 200) | map(attribute='item')

  - name: check SSH keys of Gogs accounts
    with_items: "{{ workshop_users }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/users/{{ item }}/keys"
      method: GET
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
    register: user_keys

  - name: add missing SSH keys to Gogs accounts
    with_together:
      - "{{ workshop_users }}"
      - "{{ user_keys.results }}"
    vars:
      user_pubkey: "{{ lookup('file', 'id_' +  ssh_key_type + '_' + item.0 + '.pub') }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/admin/users/{{ item.0 }}/keys"
      method: POST
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
      body_format: json
      body:
        title: default
        key: "{{ user_pubkey }}"
      status_code: 201
    when: not user_pubkey in item.1.json|map(attribute='key')
    changed_when: not user_pubkey in item.1.json|map(attribute='key')
    ignore_errors: yes
