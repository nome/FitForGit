---
- name: Set up Gogs server
  hosts: server
  vars_files:
    - "ansible/arch-{{ ansible_architecture }}.yml"

  tasks:
  # prerequisites: git package and user
  - name: install git
    package: name=git state=present
  - name: create service user 
    user: name={{ gogs_user }}

  # install/update Gogs
  - name: download Gogs
    get_url:
      url: https://cdn.gogs.io/{{ gogs_version }}/{{ gogs_arch }}.zip
      dest: /home/{{ gogs_user }}/gogs-{{ gogs_version }}.zip
    register: dl_gogs
    notify: restart gogs
  - block:
    - name: check for existing Gogs
      stat: path=/home/{{ gogs_user }}/gogs
      register: stat_gogs
    - name: shut down Gogs
      when: stat_gogs.stat.isdir is defined
      service: name=gogs state=stopped
    - name: move old gogs
      when: stat_gogs.stat.isdir is defined
      command: mv gogs gogs_old chdir=/home/{{ gogs_user }}
    - name: install unzip
      package: name=unzip state=present
    - name: unpack new gogs
      unarchive:
        copy: no
        src: /home/{{ gogs_user }}/gogs-{{ gogs_version }}.zip
        dest: /home/{{ gogs_user }}
        owner: "{{ gogs_user }}"
    - name: copy gogs state
      when: stat_gogs.stat.isdir is defined
      command: cp -a gogs_old/custom gogs_old/data gogs_old/log gogs chdir=/home/{{ gogs_user }}
    - name: remove old gogs
      file: path=/home/{{ gogs_user }}/gogs_old state=absent
    when: dl_gogs.changed
  - name: creating Gogs conf directory
    file: path=/home/{{ gogs_user }}/gogs/custom/conf state=directory owner={{ gogs_user }}

  # create/update Gogs configuration
  - name: configuring Gogs
    template: src=ansible/gogs.ini.j2 dest=/home/{{ gogs_user }}/gogs/custom/conf/app.ini owner={{ gogs_user }}
    notify: restart gogs
  - name: setup Gogs service
    template: src=ansible/gogs.service.j2 dest=/etc/systemd/system/gogs.service
    notify: restart gogs

  # set up reverse proxy
  - name: install nginx
    package: name=nginx state=present
    notify: restart nginx
  - name: configure nginx reverse proxy
    template: src=ansible/nginx_gogs.conf.j2 dest=/etc/nginx/sites-available/gogs.conf
    notify: restart nginx
  - name: disable nginx default site
    file: path=/etc/nginx/sites-enabled/default state=absent
  - name: enable nginx gogs site
    file: state=link src=/etc/nginx/sites-available/gogs.conf dest=/etc/nginx/sites-enabled/gogs.conf
    notify: restart nginx

  handlers:
    - name: restart gogs
      service: name=gogs state=restarted enabled=yes
    - name: restart nginx
      service: name=nginx state=restarted enabled=yes


- name: Check server availability
  hosts: server
  tasks:
  - name: check whether Gogs is running
    wait_for: port={{ gogs_port }}
  - name: check whether reverse proxy is running
    local_action: wait_for port=80


- name: Set up clients
  hosts: client
  vars:
    workshop_user: "{{ inventory_hostname }}"
  tasks:
  - name: install Git
    package: name=git state=present
  - name: create user account for workshop participant
    user:
      name: "{{ workshop_user }}"
      password: "{{ user_pw|password_hash('sha512') }}"
      generate_ssh_key: yes
      ssh_key_type: "{{ ssh_key_type }}"
  - name: fetch SSH key of user account
    fetch:
      src: /home/{{ workshop_user }}/.ssh/id_{{ ssh_key_type }}.pub
      dest: id_{{ ssh_key_type }}_{{ workshop_user }}.pub
      flat: yes


- name: Set up default Gogs accounts
  hosts: server

  vars:
    gogs_api: http://{{ ansible_fqdn }}/api/v1
    workshop_users: "{{ users|default(groups['client']) }}"

  tasks:
  - name: create Gogs admin_user
    command: ./gogs admin create-user --admin --name {{ admin_user }} --password {{ admin_pw }} --email {{ admin_user }}@{{ ansible_fqdn }}
    args:
      chdir: /home/{{ gogs_user }}/gogs
      creates: /home/{{ gogs_user }}/repos/{{ admin_user }}
    become: yes
    become_method: su
    become_user: "{{ gogs_user }}"

  - name: check for existing Gogs users
    with_items: "{{ workshop_users }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/users/{{ item }}"
      method: GET
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
      status_code: 200,404
    register: existing_gogs_users

  - name: create missing Gogs users for workshop participants
    with_items: "{{ workshop_users }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/admin/users"
      method: POST
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
      body_format: json
      body:
        username: "{{ item }}"
        email: "{{ item }}@localhost.localdomain"
        password: "{{ user_pw }}"
      status_code: 201
    when: item not in existing_gogs_users.results | selectattr('status', 'equalto', 200) | map(attribute='item')

  - name: check SSH keys of Gogs accounts
    with_items: "{{ workshop_users }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/users/{{ item }}/keys"
      method: GET
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
    register: user_keys

  - name: add missing SSH keys to Gogs accounts
    with_together:
      - "{{ workshop_users }}"
      - "{{ user_keys.results }}"
    vars:
      user_pubkey: "{{ lookup('file', 'id_' +  ssh_key_type + '_' + item.0 + '.pub') }}"
    local_action:
      module: uri
      url: "{{ gogs_api }}/admin/users/{{ item.0 }}/keys"
      method: POST
      user: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      force_basic_auth: yes
      body_format: json
      body:
        title: default
        key: "{{ user_pubkey }}"
      status_code: 201
    when: not user_pubkey in item.1.json|map(attribute='key')
    changed_when: not user_pubkey in item.1.json|map(attribute='key')
    ignore_errors: yes
