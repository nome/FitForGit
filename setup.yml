---
- name: set up Gogs server
  hosts: server

  pre_tasks:
  - name: make sure sudo is installed (apt)
    apt: name=sudo state=present update_cache=yes
    when: ansible_pkg_mgr == 'apt'
  - name: make sure sudo is installed (yum)
    apt: name=sudo state=present update_cache=yes
    when: ansible_pkg_mgr == 'yum'
  - name: make sure sudo is installed (pacman)
    apt: name=sudo state=present update_cache=yes
    when: ansible_pkg_mgr == 'pacman'

  roles:
    - role: nome.gogs
      gogs_app_name: FitForGit
      gogs_admin: "{{ admin_user }}"
      gogs_admin_password: "{{ admin_pw }}"
      gogs_admin_email: "{{ admin_user }}@{{ inventory_hostname }}.local"
      gogs_bind_addr: 127.0.0.1
      gogs_url: http://{{ ansible_fqdn }}/gogs

    - role: jdauphant.nginx
      nginx_sites:
        gogs:
          - listen 80
          - server_name {{ ansible_fqdn }}
          - root "/home/git/doc/site"
          - location / { try_files $uri $uri/ /index.html; }
          - location /gogs {
              rewrite ^/gogs/(.*) /$1 break;
              rewrite ^/gogs/$ / break;
              rewrite ^/gogs$ / break;
              proxy_pass http://127.0.0.1:{{ gogs_http_port }};
            }

  post_tasks:
  - name: check whether nginx is running
    local_action: wait_for port=80


- name: set up clients
  hosts: client
  vars:
    workshop_user: "{{ inventory_hostname | regex_replace('[^A-Za-z0-9]', '') | truncate(8, true, '') }}"
  tasks:
  - name: install Git
    package: name=git state=present
  - name: create user account for workshop participant
    user:
      name: "{{ workshop_user }}"
      password: "{{ user_pw|password_hash('sha512') }}"
      generate_ssh_key: yes
      ssh_key_type: "{{ ssh_key_type }}"
  - name: fetch SSH key of user account
    fetch:
      src: /home/{{ workshop_user }}/.ssh/id_{{ ssh_key_type }}.pub
      dest: id_{{ ssh_key_type }}_{{ workshop_user }}.pub
      flat: yes


- name: set up Gogs accounts
  hosts: server

  vars:
    workshop_users: "{{ users | default(groups['client'] | map('regex_replace', '[^A-Za-z0-9]', '') | map('truncate', 8, true, '') | list)}}"

  tasks:
  - name: add your SSH key to admin_user account
    local_action:
      module: gogs_user
      server_url: http://{{ ansible_fqdn }}/gogs
      login_user: "{{ admin_user }}"
      login_password: "{{ admin_pw }}"

      name: "{{ admin_user }}"
      sshkey_name: default
      sshkey_file:  "{{ lookup('file', '~/.ssh/id_{{ ssh_key_type }}.pub') }}"
    ignore_errors: yes

  - name: check for user SSH keys
    with_items: "{{ workshop_users }}"
    stat: path=id_{{ ssh_key_type }}_{{ item }}.pub
    register: user_keys

  - name: create Gogs users for workshop participants
    with_items: "{{ workshop_users }}"
    when: (user_keys.results | selectattr('item', 'equalto', item) | first).stat.exists
    local_action:
      module: gogs_user
      server_url: http://{{ ansible_fqdn }}/gogs
      login_user: "{{ admin_user }}"
      login_password: "{{ admin_pw }}"

      name: "{{ item }}"
      email: "{{ item }}@localhost.localdomain"
      password: "{{ user_pw }}"
      sshkey_name: default
      sshkey_file: "{{ lookup('file', 'id_' +  ssh_key_type + '_' + item + '.pub') }}"


- name: Copy workshop content to Gogs server
  hosts: server

  vars:
    slides:
      params:
        # see https://github.com/hakimel/reveal.js#configuration
        theme: white
        transition: slide

  tasks:
  - name: install PIP
    package: name=python-pip
  - name: install Python development package
    package: name=python-dev
  - name: install libyaml
    package: name=libyaml-dev
  - name: install mkdocs
    command: pip install mkdocs
  - name: install pandoc
    package: name=pandoc

  - name: create doc directory
    file: name="/home/git/doc" state=directory owner=git

  - name: install reveal.js
    git:
      repo: https://github.com/hakimel/reveal.js
      dest: /home/git/doc/reveal.js
      depth: 1
    become: yes
    become_user: git

  - name: create compatibility link for old pandoc (1)
    file:
      state: link
      src: reveal.js
      dest: /home/git/doc/reveal.js/js/reveal.min.js
      owner: git

  - name: create compatibility link for old pandoc (2)
    file:
      state: link
      src: reveal.css
      dest: /home/git/doc/reveal.js/css/reveal.min.css
      owner: git

  - name: create FitForGit repository
    local_action:
      module: gogs_project
      server_url: http://{{ ansible_fqdn }}/gogs
      login_user: "{{ admin_user }}"
      login_password: "{{ admin_pw }}"

      name: FitForGit
      description: toolbox for organizing Git workshops / trainings
      public: true

  - name: create custom_hooks directory
    file:
      name: /home/git/repos/{{ admin_user }}/fitforgit.git/custom_hooks
      state: directory
      owner: git

  - name: install update hook
    template:
      src: ansible/ffg_repo_update.j2
      dest: "/home/git/repos/{{ admin_user }}/fitforgit.git/custom_hooks/update"
      owner: git
      mode: 0755

  - name: add git remote for Gogs server
    local_action:
      module: shell
      args: "git config remote.{{ inventory_hostname }}.url || git remote add {{ inventory_hostname }} ssh://git@{{ ansible_fqdn }}/{{ admin_user }}/FitForGit.git"

  - name: push this repository to Gogs server
    local_action:
      module: command
      args: "git push --mirror {{ inventory_hostname }}"

  - name: create hello.git repository
    local_action:
      module: gogs_project
      server_url: http://{{ ansible_fqdn }}/gogs
      login_user: "{{ admin_user }}"
      login_password: "{{ admin_pw }}"

      name: hello
      description: sandbox repository edited during workshop
      public: true
      auto_init: true
